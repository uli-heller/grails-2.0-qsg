h1. Getting Things Done

{toc}

h2. Introduction

This document refers to chapter 6 of the "Grails Quick Start Guide". You have to initialize the project with these commands:

bc. 
.../grails-2.0-qsg/chapter-06/TekDays$ echo "y"|../../bin/grails.sh upgrade
| Environment set to development..... 
        WARNING: This target will upgrade an older Grails application to 2.0.3.
        Are you sure you want to continue?
                   [y,n] y
| Plugin 'hibernate' with version '2.0.3' is already installed
| Plugin 'tomcat' with version '2.0.3' is already installed
| Project upgraded

Note: The content of the folder "chapter-06" is different from what you get when you start with "chapter-05" and work your way through chapter 05. We've fixed the unit test classes (see 99-issues, [001]).

h2. Changing All Our Views At Once

The file "td_logo.png" has to be stored within the folder "web-app/images":

bc. 
.../grails-2.0-qsg/chapter-06/TekDays$ cp .../td_logo.png web-app/images/td_logo.png

Within "grails-app/views/layout/main.gsp", this line has to be modified:

bc. 
<div id="grailsLogo" role="banner">
  <a href="http://grails.org">
    <img src="${resource(dir: 'images', file: 'td_logo.png')}" alt="Grails"/>
  </a>
</div>

I've splitted the line in parts for better readability. The new homepage looks like this:

!images/06-61-tekdays-new-logo.png!

Next, you copy the file "main.css" to "td_main.css" and append the book's style rules to the new file.

Within "grails-app/views/layout/main.gsp", this line has to be modified:

bc. 
<link rel="stylesheet" href="${resource(dir: 'css', file: 'td_main.css')}" type="text/css">

h2. Modifying the Scaffolded Views

h3. The List View

grails-app/views/tekEvent/list.gsp - "id" isn't included, instead, there is a column for "startDate". After the modifications, it looks like this:

bc. 
<thead>
  <tr>
    <g:sortableColumn property="name" title="${message(code: 'tekEvent.name.label', default: 'Name')}" />
    <g:sortableColumn property="city" title="${message(code: 'tekEvent.city.label', default: 'City')}" />
    <g:sortableColumn property="description" title="${message(code: 'tekEvent.description.label', default: 'Description')}" />
    <g:sortableColumn property="venue" title="${message(code: 'tekEvent.venue.label', default: 'Venue')}" />
  </tr>
</thead>

Now the 2nd block:

bc. 
<tr class="${(i % 2) == 0 ? 'even' : 'odd'}">
  <td><g:link action="show" id="${tekEventInstance.id}">${fieldValue(bean: tekEventInstance, field: "name")}</g:link></td>
  <td>${fieldValue(bean: tekEventInstance, field: "city")}</td>
  <td>${fieldValue(bean: tekEventInstance, field: "description")}</td>
  <td>${fieldValue(bean: tekEventInstance, field: "venue")}</td>
</tr>

The modified TekEvent list view:

!images/06-62-modified-tekevent-list-view.png!

h3. The Show View

grails-app/views/tekEvent/show.gsp - change the headline "h1":

bc. 
<h1>${tekEventInstance?.name}</h1>

For the properties, the grails-2.x.y doesn't use @<tr>@ any more. Now, they are list items @<li>@ included within @<g:if>@. You'll have to remove everything from @<g:if>@ until @</g:if>@

Location:

bc. 
<g:if test="${tekEventInstance?.city}">
  <li class="fieldcontain">
    <span id="city-label" class="property-label">Location:</span>
    <span class="property-value" aria-labelledby="city-label">
      <g:fieldValue bean="${tekEventInstance}" field="venue"/>,
      <g:fieldValue bean="${tekEventInstance}" field="city"/>
    </span>
  </li>
</g:if>

Start date:

bc. 
<g:if test="${tekEventInstance?.startDate}">
  <li class="fieldcontain">
    <span id="startDate-label" class="property-label"><g:message code="tekEvent.startDate.label" default="Start Date" /></span>
    <span class="property-value" aria-labelledby="startDate-label">
      <g:formatDate format="MMMM dd,yyyy" date="${tekEventInstance?.startDate}" />
    </span>
  </li>
</g:if>

End date:

bc. 			
<g:if test="${tekEventInstance?.endDate}">
  <li class="fieldcontain">
    <span id="endDate-label" class="property-label"><g:message code="tekEvent.endDate.label" default="End Date" /></span>
    <span class="property-value" aria-labelledby="endDate-label">
      <g:formatDate format="MMMM dd,yyyy" date="${tekEventInstance?.endDate}" />
    </span>
  </li>
</g:if>

Sponsorship:

bc. 
<g:if test="${tekEventInstance?.sponsorships}">
  <li class="fieldcontain">
    <span id="sponsorships-label" class="property-label"><g:message code="tekEvent.sponsorships.label" default="Sponsored By" /></span>
    <g:each in="${tekEventInstance.sponsorships}" var="s">
      <span class="property-value" aria-labelledby="sponsorships-label">
        <g:link controller="sponsorship" action="show" id="${s.id}">
          ${s?.sponsor?.encodeAsHTML()}
        </g:link>
      </span>
    </g:each>
  </li>
</g:if>

!images/06-63-modified-tekevent-show-view.png!

h3. The Create View

For Grails-2.x.y, the create view consists of two parts:

* create.gsp (similar to Grails-1.x.y)
* _form.gsp (new view defining the form for create and edit)

The "datePicker" is located in "_form.gsp". The precision is set to "day" by default, so no change is required.

!images/06-64-modified-tekevent-create-view.png!

h3. The Edit View

For Grails-2.x.y, the edit view consists of two parts:

* create.gsp (similar to Grails-1.x.y)
* _form.gsp (new view defining the form for create and edit)

We have to modify "_form.gsp" again. As before, we don't habe to set the precision, since it defaults to "day" anyway. We just have to fix the display of the sponsorships.

!images/06-65-modified-tekevent-edit-view.png!

h2. Event Task List

No remarks.

h2. Grails Services Classes

bc. 
.../grails-2.0-qsg/chapter-06/TekDays$ ../../bin/grails.sh create-service Task
| Created file grails-app/services/tekdays/TaskService.groovy
| Created file test/unit/tekdays/TaskServiceTests.groovy

The name of the service class is "grails-app/services/tekdays/TaskService.groovy". The property "transactional" is missing for Grails-2.x.y.

!images/06-66-tekevent-show-view-default-tasks.png!

Commands to move the test class of the service:

bc. 
.../grails-2.0-qsg/chapter-06/TekDays$ mkdir test/integration/tekdays
.../grails-2.0-qsg/chapter-06/TekDays$ mv test/unit/tekdays/TaskServiceTests.groovy test/integration/tekdays/.

h2. Integration Testing

Running all the tests with @../../bin/grails.sh test-app@ produces an error related to the TekEventControllerTests. To fix it, you have to modify the file "test/unit/tekdays/TekEventControllerTests.groovy":

* Old: @Mock([TekEvent,TekUser])@
* New: @Mock([TekEvent,TekUser,TaskService])@

Name of the integration test: test/integration/tekdays/TaskServiceTests.groovy

<pre>
package tekdays

import grails.test.mixin.*
import org.junit.*

/**
 * See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions
 */
@TestFor(TaskService)
class TaskServiceTests {

    def taskService

    protected void setUp() {
        super.setUp()
        new TekUser(fullName: 'Tammy Tester',
                    userName: 'tester',
                    email:    'tester@test.com',
                    website:  'test.com',
                    bio:      'A test person').save()
    }

    protected void tearDown() {
        super.tearDown()
    }

    void testAddDefaultTasks() {
        def e = new TekEvent(name: 'Test Event',
                             city: 'TestCity, USA',
                             description: 'Test Description',
                             organizer: TekUser.findByUserName('tester'),
                             venue: 'TestCenter',
                             startDate: new Date(),
                             endDate: new Date() + 1)
        taskService.addDefaultTasks(e)
        assert e.tasks.size() == 6
    }

}
</pre>

Now run the integration tests with: @../../bin/grails.sh test-app integration:@
Or run all tests with: @../../bin/grails.sh test-app@

h2. Modifying the Task Class

Name of the domain class: grails-app/domain/tekdays/Task.groovy

The view "show.gsp" has to be modified like this:

bc. 
...
  <g:if test="${taskInstance?.completed}">
    <li class="fieldcontain">
      <span id="completed-label" class="property-label"><g:message code="task.completed.label" default="Completed" /></span>
      <span class="property-value" aria-labelledby="completed-label"><g:fieldValue bean="${taskInstance}" field="completed"/></span>
    </li>
  </g:if>
</ol>

Instead of "edit.gsp", we have to modify "_form.gsp":

bc. 
<div class="fieldcontain ${hasErrors(bean: taskInstance, field: 'completed', 'error')} required">
  <label for="completed">
    <g:message code="task.completed.label" default="Completed" />
    <span class="required-indicator">*</span>
  </label>
  <g:checkBox name="completed" value="${taskInstance?.completed}"/>
</div>


Finally, the task edit view looks like this:

!images/06-67-task-edit-view.png!
